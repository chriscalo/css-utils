@import "./functions.scss";


/*============================================================================*\
  RESETS
\*============================================================================*/

[focus-reset],
[focus-no-outline],
[no-outline] {
  &:focus {
    outline: none;
  }
}

[reset],
[button-reset] {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  
  &:focus {
    outline: none;
  }
}


/*============================================================================*\
  LAYOUT
\*============================================================================*/

[debug],
[outline] {
  outline: solid 1px magenta;
  outline-offset: -1px; // inset instead of outset
}

[hidden] {
  display: none;
}

[block] {
  display: block;
}

[inline-block] {
  display: inline-block;
}

[grid] {
  display: grid;
}

[fill-grid] {
  grid-row: 1 / -1;
  grid-column: 1 / -1;
}

[positioned],
[absolute] {
  position: absolute;
}

[relative] {
  position: relative;
}

[fixed] {
  position: fixed;
}

[center-xy] {
  display: flex;
  justify-content: center;
  align-items: center;
}

[spacer] {
  flex-grow: 1;
}


/*============================================================================*\
  EDGE PINNING
  Requires `position: absolute`
\*============================================================================*/

[pin-all] {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

[pin-top] {
  top: 0;
}

[pin-right] {
  right: 0;
}

[pin-bottom] {
  bottom: 0;
}

[pin-left] {
  left: 0;
}

[pin-x] {
  right: 0;
  left: 0;
}

[pin-y] {
  top: 0;
  bottom: 0;
}

[unpin-all] {
  top: auto;
  right: auto;
  bottom: auto;
  left: auto;
}

[unpin-top] {
  top: auto;
}

[unpin-right] {
  right: auto;
}

[unpin-bottom] {
  bottom: auto;
}

[unpin-left] {
  left: auto;
}

[unpin-x] {
  right: auto;
  left: auto;
}

[unpin-y] {
  top: auto;
  bottom: auto;
}


/*============================================================================*\
  FLEXBOX
\*============================================================================*/

[flex-col],
[stack-v],
[stack-y] {
  display: flex;
  flex-direction: column;
}

[flex-row],
[stack-h],
[stack-x] {
  display: flex;
  flex-direction: row;
}

[grow] {
  flex-grow: 1;
}

[no-grow] {
  flex-grow: 0;
}

[shrink] {
  flex-shrink: 1;
  min-width: 0;
  min-height: 0;
}

[no-shrink] {
  flex-shrink: 0;
}

[items-center] {
  align-items: center;
}

[content-flex-start],
[content-start] {
  justify-content: flex-start;
}

[content-flex-end],
[content-end] {
  justify-content: flex-end;
}

[content-center] {
  justify-content: center;
}

[content-space-between],
[content-between],
[content-distribute] {
  justify-content: space-between;
}

[content-space-around],
[content-around] {
  justify-content: space-around;
}



/*============================================================================*\
  Spacing and sizing based on an 8px grid
\*============================================================================*/

$grid-unit: 8px;

// TODO: adjust spacing scale for smaller values
$grid-space-scale: 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 6 7 8 9 10 11 12 13 14 16 18 20 24 28 32;

@each $n in $grid-space-scale {
  // escape decimal points so they make valid attribute selectors
  $n-str: str-replace(inspect($n), ".", "\\.");
  $len: $n * $grid-unit;
  
  [gap-#{$n-str}] {
    grid-gap: $len;
  }
  
  [gap-x-#{$n-str}] {
    grid-column-gap: $len;
  }
  
  [gap-y-#{$n-str}] {
    grid-row-gap: $len;
  }
  
  [pad-#{$n-str}] {
    padding: $len;
  }
  
  [pad-x-#{$n-str}] {
    padding-left: $len;
    padding-right: $len;
  }
  
  [pad-l-#{$n-str}],
  [pad-left-#{$n-str}] {
    padding-left: $len;
  }
  
  [pad-r-#{$n-str}],
  [pad-right-#{$n-str}] {
    padding-right: $len;
  }
  
  [pad-y-#{$n-str}] {
    padding-top: $len;
    padding-bottom: $len;
  }
  
  [pad-t-#{$n-str}],
  [pad-top-#{$n-str}] {
    padding-top: $len;
  }
  
  [pad-b-#{$n-str}],
  [pad-bottom-#{$n-str}] {
    padding-bottom: $len;
  }
  
  [margin-#{$n-str}] {
    margin: $len;
  }
  
  [margin-x-#{$n-str}] {
    margin-left: $len;
    margin-right: $len;
  }
  
  [margin-l-#{$n-str}],
  [margin-left-#{$n-str}] {
    margin-left: $len;
  }
  
  [margin-r-#{$n-str}],
  [margin-right-#{$n-str}] {
    margin-right: $len;
  }
  
  [margin-y-#{$n-str}] {
    margin-top: $len;
    margin-bottom: $len;
  }
  
  [margin-t-#{$n-str}],
  [margin-top-#{$n-str}] {
    margin-top: $len;
  }
  
  [margin-b-#{$n-str}],
  [margin-bottom-#{$n-str}] {
    margin-top: $len;
  }
  
}

$nudge-scale: 1 2 3 4 6 8;

@each $n in $nudge-scale {
  $n-str: str-replace(inspect($n), ".", "\\.");
  $len: $n * 1px;
  
  [nudge-down-#{$n}] {
    position: relative;
    top: $len;
  }
  
  [nudge-up-#{$n}] {
    position: relative;
    top: $len * -1;
  }
  
  [nudge-right-#{$n}] {
    position: relative;
    left: $len;
  }
  
  [nudge-left-#{$n}] {
    position: relative;
    left: $len * -1;
  }
}


// make gap-* work for vertical stacks
[flex-col],
[stack-v],
[stack-y] {
  
  @each $n in $grid-space-scale {
    // escape decimal points so they make valid attribute selectors
    $n-str: str-replace(inspect($n), ".", "\\.");
    $len: $n * $grid-unit;
    
    &[gap-#{$n-str}] > :not(:last-child) {
      margin-bottom: $len;
    }
  }
}

// make gap-* work for horizontal stacks
[flex-row],
[stack-h],
[stack-x] {
  @each $n in $grid-space-scale {
    // escape decimal points so they make valid attribute selectors
    $n-str: str-replace(inspect($n), ".", "\\.");
    $len: $n * $grid-unit;
    
    &[gap-#{$n-str}] > :not(:last-child) {
      margin-right: $len;
    }
  }
}


$self-alignment: (
  "start": flex-start,
  "center": center,
  "end": flex-end,
  "baseline": baseline, // for flex-direction: row | row-reverse parents only
  "fill": stretch,
);

@each $name, $value in $self-alignment {
  [self-#{$name}],
  [self-align-#{$name}] {
    align-self: $value;
  }
}



// TODO: adjust size scale for larger values
$grid-size-scale: 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 6 7 8 9 10 11 12 13 14 16 18 20 24 28 32;

@each $n in $grid-size-scale {
  // escape decimal points so they make valid attribute selectors
  $n-str: str-replace(inspect($n), ".", "\\.");
  $len: $n * $grid-unit;
  
  [width-#{$n-str}] {
    width: $len;
  }
  
  [min-width-#{$n-str}] {
    min-width: $len;
  }
  
  [max-width-#{$n-str}] {
    max-width: $len;
  }
  
  [height-#{$n-str}] {
    height: $len;
  }
  
  [min-height-#{$n-str}] {
    min-height: $len;
  }
  
  [max-height-#{$n-str}] {
    max-height: $len;
  }
  
  [size-#{$n-str}] {
    width: $len;
    height: $len;
  }
  
  [min-size-#{$n-str}] {
    min-width: $len;
    min-height: $len;
  }
  
  [max-size-#{$n-str}] {
    max-width: $len;
    max-height: $len;
  }
}

// TODO: incorporate `full` into the scale

[height-full] {
  height: 100%;
}

[width-full]  {
  width:  100%;
}

[size-full]  {
  width: 100%;
  height: 100%;
}


/*============================================================================*\
  ICONS
  Used to resize icon fonts.
\*============================================================================*/

$icon-scale: (
  "xs": 16px,
  "s": 20px,
  "m": 24px,
  "l": 28px,
  "xl": 32px,
);

@each $name, $value in $icon-scale {
  [icon-#{$name}] {
    font-size: $value;
  }
}


/*============================================================================*\
  TEXT
\*============================================================================*/

$text-scale: (
  "xxxs": 11px,
  "xxs": 12px,
  "xs": 13px,
  "s": 14px,
  "m": 16px,
  "l": 20px,
  "xl": 24px,
  "xxl": 32px,
  "xxxl": 48px,
);

@each $name, $value in $text-scale {
  [text-#{$name}] {
    font-size: $value;
  }
}

// text-transform
@each $value in (capitalize uppercase lowercase) {
  [#{$value}] {
    text-transform: $value;
  }
}

// TODO: remove the align-* selectors?
@each $value in (baseline sub super text-top text-bottom middle top bottom) {
  [text-align-#{$value}],
  [align-#{$value}] {
    vertical-align: $value;
  }
}

// TODO: remove the align-* selectors?
@each $value in (left center right justify) {
  [text-align-#{$value}],
  [align-#{$value}] {
    text-align: $value;
  }
}

[break-word] {
  overflow-wrap: break-word;
}

$text-weight-scale: (
  "hairline": 100,
  "thin": 200,
  "light": 300,
  "normal": 400,
  "medium": 500,
  "semibold": 600,
  "bold": 700,
  "extrabold": 800,
  "black": 900,
);

@each $name, $value in $text-weight-scale {
  [text-weight-#{$name}] {
    font-weight: $value;
  }
}



/*============================================================================*\
  BORDERS
\*============================================================================*/

$stroke-color: rgba(0, 0, 0, 0.1);
$stroke: solid 1px $stroke-color;

[stroke] {
  border: $stroke;
}

[stroke-y] {
  border-top: $stroke;
  border-bottom: $stroke;
}

[stroke-x] {
  border-right: $stroke;
  border-left: $stroke;
}

[stroke-top] {
  border-top: $stroke;
}

[stroke-right] {
  border-right: $stroke;
}

[stroke-bottom] {
  border-bottom: $stroke;
}

[stroke-left] {
  border-left: $stroke;
}


/*============================================================================*\
  INTERACTION
\*============================================================================*/

[no-select] {
  user-select: none;
}

[scroll-y] {
  overflow-y: auto;
}

[scroll-x] {
  overflow-x: auto;
}


/*============================================================================*\
  COLORS
\*============================================================================*/

$greyscale: (
  "000": #000,
  "111": #111,
  "222": #222,
  "333": #333,
  "444": #444,
  "555": #555,
  "666": #666,
  "777": #777,
  "888": #888,
  "999": #999,
  "aaa": #aaa,
  "bbb": #bbb,
  "ccc": #ccc,
  "ddd": #ddd,
  "eee": #eee,
  "fff": #fff,
);

@each $name, $color in $greyscale {
  [color-#{$name}] {
    color: $color;
  }
  
  [color-#{$name}] {
    color: $color;
  }
  
  [hover-color-#{$name}]:hover {
    color: $color;
  }
  
  [bg-#{$name}] {
    background-color: $color;
  }
  
  [hover-bg-#{$name}]:hover {
    background-color: $color;
  }
}


/*============================================================================*\
  CORNERS
\*============================================================================*/

$corners: (
  none: 0,
  xs: 1px,
  s: 2px,
  m: 4px,
  l: 8px,
  xl: 16px,
  xxl: 32px,
);

// TODO: rounded-top-* and rounded-bottom-*

@each $name, $value in $corners {
  [rounded-#{$name}] {
    border-radius: $value;
  }
  
  [rounded-left-#{$name}] {
    border-top-left-radius: $value;
    border-bottom-left-radius: $value;
  }
  
  [rounded-right-#{$name}] {
    border-top-right-radius: $value;
    border-bottom-right-radius: $value;
  }
  
  [rounded-top-#{$name}] {
    border-top-left-radius: $value;
    border-top-right-radius: $value;
  }
  
  [rounded-bottom-#{$name}] {
    border-bottom-left-radius: $value;
    border-bottom-right-radius: $value;
  }
  
  [rounded-x-first-last-#{$name}] {
    &:first-child {
      border-top-left-radius: $value;
      border-bottom-left-radius: $value;
    }
    
    &:last-child {
      border-top-right-radius: $value;
      border-bottom-right-radius: $value;
    }
  }
  
  [rounded-y-first-last-#{$name}] {
    &:first-child {
      border-top-left-radius: $value;
      border-top-right-radius: $value;
    }
    
    &:last-child {
      border-bottom-left-radius: $value;
      border-bottom-right-radius: $value;
    }
  }
}


/*============================================================================*\
  OPACITY
\*============================================================================*/

$opacity-scale: (
  none: 0,
  0: 0,
  10: 0.10,
  20: 0.20,
  25: 0.25,
  30: 0.30,
  40: 0.40,
  50: 0.50,
  60: 0.60,
  70: 0.70,
  75: 0.75,
  80: 0.80,
  90: 0.90,
  100: 1,
  full: 1,
);

@each $name, $value in $opacity-scale {
  [opacity-#{$name}] {
    opacity: $value;
  }
}

/*============================================================================*\
  INTERACTION
\*============================================================================*/

[no-mouse] {
  pointer-events: none;
}

// Source: https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
$cursors: auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out grab grabbing;

@each $cursor in $cursors {
  [cursor-#{$cursor}] {
    cursor: $cursor;
  }
}
